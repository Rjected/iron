
package "client" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_extended bin_prot command_rpc core core_extended fieldslib iron.common iron.hg iron.ml-api iron.obligations iron.pdiff4 iron.protocol patdiff.lib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib typerep variantslib"
  archive(byte  ) = "iron_client.cma"
  archive(native) = "iron_client.cmxa"
  plugin(byte  ) = "iron_client.cma"
  plugin(native) = "iron_client.cmxs"
  exists_if = "iron_client.cma"
)

package "common" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_interactive bin_prot core fieldslib incremental ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib textutils typerep variantslib"
  archive(byte  ) = "iron_common.cma"
  archive(native) = "iron_common.cmxa"
  plugin(byte  ) = "iron_common.cma"
  plugin(native) = "iron_common.cmxs"
  exists_if = "iron_common.cma"
)

package "hg" (
  version = "$(pkg_version)"
  description = ""
  requires = "async bin_prot core fieldslib iron.common iron.obligations ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib typerep variantslib"
  archive(byte  ) = "iron_hg.cma"
  archive(native) = "iron_hg.cmxa"
  plugin(byte  ) = "iron_hg.cma"
  plugin(native) = "iron_hg.cmxs"
  exists_if = "iron_hg.cma"
)

package "ml-api" (
  version = "$(pkg_version)"
  description = ""
  requires = "async bin_prot command_rpc core core_extended fieldslib iron.common iron.hg iron.protocol ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib sexplib typerep variantslib"
  archive(byte  ) = "iron.cma"
  archive(native) = "iron.cmxa"
  plugin(byte  ) = "iron.cma"
  plugin(native) = "iron.cmxs"
  exists_if = "iron.cma"
)

package "obligations" (
  version = "$(pkg_version)"
  description = ""
  requires = "async bin_prot core fieldslib iron.common ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib typerep variantslib"
  archive(byte  ) = "iron_obligations.cma"
  archive(native) = "iron_obligations.cmxa"
  plugin(byte  ) = "iron_obligations.cma"
  plugin(native) = "iron_obligations.cmxs"
  exists_if = "iron_obligations.cma"
)

package "pdiff4" (
  version = "$(pkg_version)"
  description = ""
  requires = "async bin_prot core fieldslib iron.common iron.hg patdiff.lib patience_diff ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib textutils typerep variantslib"
  archive(byte  ) = "pdiff4.cma"
  archive(native) = "pdiff4.cmxa"
  plugin(byte  ) = "pdiff4.cma"
  plugin(native) = "pdiff4.cmxs"
  exists_if = "pdiff4.cma"
)

package "protocol" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_extended async_interactive bin_prot command_rpc core fieldslib iron.common iron.hg ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib sexplib typerep variantslib"
  archive(byte  ) = "iron_protocol.cma"
  archive(native) = "iron_protocol.cmxa"
  plugin(byte  ) = "iron_protocol.cma"
  plugin(native) = "iron_protocol.cmxs"
  exists_if = "iron_protocol.cma"
)

package "server" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_extended bin_prot core core_extended fieldslib iron.common iron.hg iron.protocol ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib sexplib typerep variantslib"
  archive(byte  ) = "iron_server.cma"
  archive(native) = "iron_server.cmxa"
  plugin(byte  ) = "iron_server.cma"
  plugin(native) = "iron_server.cmxs"
  exists_if = "iron_server.cma"
)
